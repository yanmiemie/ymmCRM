{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/thread-loader/dist/cjs.js!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.js","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vuetify/lib/components/VAutocomplete/VAutocomplete.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}