{"remainingRequest":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/thread-loader/dist/cjs.js!/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/babel-loader/lib/index.js!/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/eslint-loader/index.js??ref--13-0!/Users/qiushunqun/Desktop/_長庚/ask8/src/vuedraggable.js","dependencies":[{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/src/vuedraggable.js","mtime":1635432551944},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}