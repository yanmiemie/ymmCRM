{"remainingRequest":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qiushunqun/Desktop/_長庚/ask8/src/components/asask5_AddPlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/src/components/asask5_AddPlayer.vue","mtime":1651641192189},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/_長庚/ask8/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}