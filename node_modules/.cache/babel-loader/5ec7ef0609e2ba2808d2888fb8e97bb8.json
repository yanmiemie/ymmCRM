{"remainingRequest":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/thread-loader/dist/cjs.js!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js!/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vuetify/lib/components/VSlider/VSlider.js","dependencies":[{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/vuetify/lib/components/VSlider/VSlider.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qiushunqun/Desktop/射箭專案/GitHub/17soooo/17soooo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIi9Vc2Vycy9xaXVzaHVucXVuL0Rlc2t0b3AvXHU1QzA0XHU3QkFEXHU1QzA4XHU2ODQ4L0dpdEh1Yi8xN3Nvb29vLzE3c29vb28vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL3FpdXNodW5xdW4vRGVza3RvcC9cdTVDMDRcdTdCQURcdTVDMDhcdTY4NDgvR2l0SHViLzE3c29vb28vMTdzb29vby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVlNsaWRlci9WU2xpZGVyLnNhc3MiOyAvLyBDb21wb25lbnRzCgppbXBvcnQgVklucHV0IGZyb20gJy4uL1ZJbnB1dCc7CmltcG9ydCB7IFZTY2FsZVRyYW5zaXRpb24gfSBmcm9tICcuLi90cmFuc2l0aW9ucyc7IC8vIE1peGlucwoKaW1wb3J0IG1peGlucyBmcm9tICcuLi8uLi91dGlsL21peGlucyc7CmltcG9ydCBMb2FkYWJsZSBmcm9tICcuLi8uLi9taXhpbnMvbG9hZGFibGUnOyAvLyBEaXJlY3RpdmVzCgppbXBvcnQgQ2xpY2tPdXRzaWRlIGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvY2xpY2stb3V0c2lkZSc7IC8vIEhlbHBlcnMKCmltcG9ydCB7IGFkZE9uY2VFdmVudExpc3RlbmVyLCBkZWVwRXF1YWwsIGtleUNvZGVzLCBjcmVhdGVSYW5nZSwgY29udmVydFRvVW5pdCwgcGFzc2l2ZVN1cHBvcnRlZCB9IGZyb20gJy4uLy4uL3V0aWwvaGVscGVycyc7CmltcG9ydCB7IGNvbnNvbGVXYXJuIH0gZnJvbSAnLi4vLi4vdXRpbC9jb25zb2xlJzsKZXhwb3J0IGRlZmF1bHQgbWl4aW5zKFZJbnB1dCwgTG9hZGFibGUKLyogQHZ1ZS9jb21wb25lbnQgKi8KKS5leHRlbmQoewogIG5hbWU6ICd2LXNsaWRlcicsCiAgZGlyZWN0aXZlczogewogICAgQ2xpY2tPdXRzaWRlOiBDbGlja091dHNpZGUKICB9LAogIG1peGluczogW0xvYWRhYmxlXSwKICBwcm9wczogewogICAgZGlzYWJsZWQ6IEJvb2xlYW4sCiAgICBpbnZlcnNlTGFiZWw6IEJvb2xlYW4sCiAgICBtYXg6IHsKICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogMTAwCiAgICB9LAogICAgbWluOiB7CiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDAKICAgIH0sCiAgICBzdGVwOiB7CiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sCiAgICAgIGRlZmF1bHQ6IDEKICAgIH0sCiAgICB0aHVtYkNvbG9yOiBTdHJpbmcsCiAgICB0aHVtYkxhYmVsOiB7CiAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiB1bmRlZmluZWQsCiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yKHYpIHsKICAgICAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdib29sZWFuJyB8fCB2ID09PSAnYWx3YXlzJzsKICAgICAgfQogICAgfSwKICAgIHRodW1iU2l6ZTogewogICAgICB0eXBlOiBbTnVtYmVyLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiAzMgogICAgfSwKICAgIHRpY2tMYWJlbHM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIHRpY2tzOiB7CiAgICAgIHR5cGU6IFtCb29sZWFuLCBTdHJpbmddLAogICAgICBkZWZhdWx0OiBmYWxzZSwKICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IodikgewogICAgICAgIHJldHVybiB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nIHx8IHYgPT09ICdhbHdheXMnOwogICAgICB9CiAgICB9LAogICAgdGlja1NpemU6IHsKICAgICAgdHlwZTogW051bWJlciwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogMgogICAgfSwKICAgIHRyYWNrQ29sb3I6IFN0cmluZywKICAgIHRyYWNrRmlsbENvbG9yOiBTdHJpbmcsCiAgICB2YWx1ZTogW051bWJlciwgU3RyaW5nXSwKICAgIHZlcnRpY2FsOiBCb29sZWFuCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgYXBwOiBudWxsLAogICAgICBvbGRWYWx1ZTogbnVsbCwKICAgICAgdGh1bWJQcmVzc2VkOiBmYWxzZSwKICAgICAgbW91c2VUaW1lb3V0OiAtMSwKICAgICAgaXNGb2N1c2VkOiBmYWxzZSwKICAgICAgaXNBY3RpdmU6IGZhbHNlLAogICAgICBub0NsaWNrOiBmYWxzZSwKICAgICAgc3RhcnRPZmZzZXQ6IDAKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgY2xhc3NlczogZnVuY3Rpb24gY2xhc3NlcygpIHsKICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgVklucHV0Lm9wdGlvbnMuY29tcHV0ZWQuY2xhc3Nlcy5jYWxsKHRoaXMpKSwge30sIHsKICAgICAgICAndi1pbnB1dF9fc2xpZGVyJzogdHJ1ZSwKICAgICAgICAndi1pbnB1dF9fc2xpZGVyLS12ZXJ0aWNhbCc6IHRoaXMudmVydGljYWwsCiAgICAgICAgJ3YtaW5wdXRfX3NsaWRlci0taW52ZXJzZS1sYWJlbCc6IHRoaXMuaW52ZXJzZUxhYmVsCiAgICAgIH0pOwogICAgfSwKICAgIGludGVybmFsVmFsdWU6IHsKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubGF6eVZhbHVlOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2YWwpIHsKICAgICAgICB2YWwgPSBpc05hTih2YWwpID8gdGhpcy5taW5WYWx1ZSA6IHZhbDsgLy8gUm91bmQgdmFsdWUgdG8gZW5zdXJlIHRoZQogICAgICAgIC8vIGVudGlyZSBzbGlkZXIgcmFuZ2UgY2FuCiAgICAgICAgLy8gYmUgc2VsZWN0ZWQgd2l0aCBzdGVwCgogICAgICAgIHZhciB2YWx1ZSA9IHRoaXMucm91bmRWYWx1ZShNYXRoLm1pbihNYXRoLm1heCh2YWwsIHRoaXMubWluVmFsdWUpLCB0aGlzLm1heFZhbHVlKSk7CiAgICAgICAgaWYgKHZhbHVlID09PSB0aGlzLmxhenlWYWx1ZSkgcmV0dXJuOwogICAgICAgIHRoaXMubGF6eVZhbHVlID0gdmFsdWU7CiAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2YWx1ZSk7CiAgICAgIH0KICAgIH0sCiAgICB0cmFja1RyYW5zaXRpb246IGZ1bmN0aW9uIHRyYWNrVHJhbnNpdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMudGh1bWJQcmVzc2VkID8gdGhpcy5zaG93VGlja3MgfHwgdGhpcy5zdGVwTnVtZXJpYyA/ICcwLjFzIGN1YmljLWJlemllcigwLjI1LCAwLjgsIDAuNSwgMSknIDogJ25vbmUnIDogJyc7CiAgICB9LAogICAgbWluVmFsdWU6IGZ1bmN0aW9uIG1pblZhbHVlKCkgewogICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLm1pbik7CiAgICB9LAogICAgbWF4VmFsdWU6IGZ1bmN0aW9uIG1heFZhbHVlKCkgewogICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLm1heCk7CiAgICB9LAogICAgc3RlcE51bWVyaWM6IGZ1bmN0aW9uIHN0ZXBOdW1lcmljKCkgewogICAgICByZXR1cm4gdGhpcy5zdGVwID4gMCA/IHBhcnNlRmxvYXQodGhpcy5zdGVwKSA6IDA7CiAgICB9LAogICAgaW5wdXRXaWR0aDogZnVuY3Rpb24gaW5wdXRXaWR0aCgpIHsKICAgICAgdmFyIGlucHV0V2lkdGggPSAodGhpcy5yb3VuZFZhbHVlKHRoaXMuaW50ZXJuYWxWYWx1ZSkgLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSkgKiAxMDA7CiAgICAgIHJldHVybiBpc05hTihpbnB1dFdpZHRoKSA/IDAgOiBpbnB1dFdpZHRoOwogICAgfSwKICAgIHRyYWNrRmlsbFN0eWxlczogZnVuY3Rpb24gdHJhY2tGaWxsU3R5bGVzKCkgewogICAgICB2YXIgX3JlZjsKCiAgICAgIHZhciBzdGFydERpciA9IHRoaXMudmVydGljYWwgPyAnYm90dG9tJyA6ICdsZWZ0JzsKICAgICAgdmFyIGVuZERpciA9IHRoaXMudmVydGljYWwgPyAndG9wJyA6ICdyaWdodCc7CiAgICAgIHZhciB2YWx1ZURpciA9IHRoaXMudmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7CiAgICAgIHZhciBzdGFydCA9IHRoaXMuJHZ1ZXRpZnkucnRsID8gJ2F1dG8nIDogJzAnOwogICAgICB2YXIgZW5kID0gdGhpcy4kdnVldGlmeS5ydGwgPyAnMCcgOiAnYXV0byc7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuaXNEaXNhYmxlZCA/ICJjYWxjKCIuY29uY2F0KHRoaXMuaW5wdXRXaWR0aCwgIiUgLSAxMHB4KSIpIDogIiIuY29uY2F0KHRoaXMuaW5wdXRXaWR0aCwgIiUiKTsKICAgICAgcmV0dXJuIF9yZWYgPSB7CiAgICAgICAgdHJhbnNpdGlvbjogdGhpcy50cmFja1RyYW5zaXRpb24KICAgICAgfSwgX2RlZmluZVByb3BlcnR5KF9yZWYsIHN0YXJ0RGlyLCBzdGFydCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCBlbmREaXIsIGVuZCksIF9kZWZpbmVQcm9wZXJ0eShfcmVmLCB2YWx1ZURpciwgdmFsdWUpLCBfcmVmOwogICAgfSwKICAgIHRyYWNrU3R5bGVzOiBmdW5jdGlvbiB0cmFja1N0eWxlcygpIHsKICAgICAgdmFyIF9yZWYyOwoKICAgICAgdmFyIHN0YXJ0RGlyID0gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuJHZ1ZXRpZnkucnRsID8gJ2JvdHRvbScgOiAndG9wJyA6IHRoaXMuJHZ1ZXRpZnkucnRsID8gJ2xlZnQnIDogJ3JpZ2h0JzsKICAgICAgdmFyIGVuZERpciA9IHRoaXMudmVydGljYWwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7CiAgICAgIHZhciBzdGFydCA9ICcwcHgnOwogICAgICB2YXIgZW5kID0gdGhpcy5pc0Rpc2FibGVkID8gImNhbGMoIi5jb25jYXQoMTAwIC0gdGhpcy5pbnB1dFdpZHRoLCAiJSAtIDEwcHgpIikgOiAiY2FsYygiLmNvbmNhdCgxMDAgLSB0aGlzLmlucHV0V2lkdGgsICIlKSIpOwogICAgICByZXR1cm4gX3JlZjIgPSB7CiAgICAgICAgdHJhbnNpdGlvbjogdGhpcy50cmFja1RyYW5zaXRpb24KICAgICAgfSwgX2RlZmluZVByb3BlcnR5KF9yZWYyLCBzdGFydERpciwgc3RhcnQpLCBfZGVmaW5lUHJvcGVydHkoX3JlZjIsIGVuZERpciwgZW5kKSwgX3JlZjI7CiAgICB9LAogICAgc2hvd1RpY2tzOiBmdW5jdGlvbiBzaG93VGlja3MoKSB7CiAgICAgIHJldHVybiB0aGlzLnRpY2tMYWJlbHMubGVuZ3RoID4gMCB8fCAhISghdGhpcy5pc0Rpc2FibGVkICYmIHRoaXMuc3RlcE51bWVyaWMgJiYgdGhpcy50aWNrcyk7CiAgICB9LAogICAgbnVtVGlja3M6IGZ1bmN0aW9uIG51bVRpY2tzKCkgewogICAgICByZXR1cm4gTWF0aC5jZWlsKCh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSkgLyB0aGlzLnN0ZXBOdW1lcmljKTsKICAgIH0sCiAgICBzaG93VGh1bWJMYWJlbDogZnVuY3Rpb24gc2hvd1RodW1iTGFiZWwoKSB7CiAgICAgIHJldHVybiAhdGhpcy5pc0Rpc2FibGVkICYmICEhKHRoaXMudGh1bWJMYWJlbCB8fCB0aGlzLiRzY29wZWRTbG90c1sndGh1bWItbGFiZWwnXSk7CiAgICB9LAogICAgY29tcHV0ZWRUcmFja0NvbG9yOiBmdW5jdGlvbiBjb21wdXRlZFRyYWNrQ29sb3IoKSB7CiAgICAgIGlmICh0aGlzLmlzRGlzYWJsZWQpIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIGlmICh0aGlzLnRyYWNrQ29sb3IpIHJldHVybiB0aGlzLnRyYWNrQ29sb3I7CiAgICAgIGlmICh0aGlzLmlzRGFyaykgcmV0dXJuIHRoaXMudmFsaWRhdGlvblN0YXRlOwogICAgICByZXR1cm4gdGhpcy52YWxpZGF0aW9uU3RhdGUgfHwgJ3ByaW1hcnkgbGlnaHRlbi0zJzsKICAgIH0sCiAgICBjb21wdXRlZFRyYWNrRmlsbENvbG9yOiBmdW5jdGlvbiBjb21wdXRlZFRyYWNrRmlsbENvbG9yKCkgewogICAgICBpZiAodGhpcy5pc0Rpc2FibGVkKSByZXR1cm4gdW5kZWZpbmVkOwogICAgICBpZiAodGhpcy50cmFja0ZpbGxDb2xvcikgcmV0dXJuIHRoaXMudHJhY2tGaWxsQ29sb3I7CiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25TdGF0ZSB8fCB0aGlzLmNvbXB1dGVkQ29sb3I7CiAgICB9LAogICAgY29tcHV0ZWRUaHVtYkNvbG9yOiBmdW5jdGlvbiBjb21wdXRlZFRodW1iQ29sb3IoKSB7CiAgICAgIGlmICh0aGlzLnRodW1iQ29sb3IpIHJldHVybiB0aGlzLnRodW1iQ29sb3I7CiAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25TdGF0ZSB8fCB0aGlzLmNvbXB1dGVkQ29sb3I7CiAgICB9CiAgfSwKICB3YXRjaDogewogICAgbWluOiBmdW5jdGlvbiBtaW4odmFsKSB7CiAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbCk7CiAgICAgIHBhcnNlZCA+IHRoaXMuaW50ZXJuYWxWYWx1ZSAmJiB0aGlzLiRlbWl0KCdpbnB1dCcsIHBhcnNlZCk7CiAgICB9LAogICAgbWF4OiBmdW5jdGlvbiBtYXgodmFsKSB7CiAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbCk7CiAgICAgIHBhcnNlZCA8IHRoaXMuaW50ZXJuYWxWYWx1ZSAmJiB0aGlzLiRlbWl0KCdpbnB1dCcsIHBhcnNlZCk7CiAgICB9LAogICAgdmFsdWU6IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcih2KSB7CiAgICAgICAgdGhpcy5pbnRlcm5hbFZhbHVlID0gdjsKICAgICAgfQogICAgfQogIH0sCiAgLy8gSWYgZG9uZSBpbiBhcyBpbW1lZGlhdGUgaW4KICAvLyB2YWx1ZSB3YXRjaGVyLCBjYXVzZXMgaXNzdWVzCiAgLy8gd2l0aCB2dWUtdGVzdC11dGlscwogIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCgpIHsKICAgIHRoaXMuaW50ZXJuYWxWYWx1ZSA9IHRoaXMudmFsdWU7CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgLy8gV2l0aG91dCBhIHYtYXBwLCBpT1MgZG9lcyBub3Qgd29yayB3aXRoIGJvZHkgc2VsZWN0b3JzCiAgICB0aGlzLmFwcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWFwcF0nKSB8fCBjb25zb2xlV2FybignTWlzc2luZyB2LWFwcCBvciBhIG5vbi1ib2R5IHdyYXBwaW5nIGVsZW1lbnQgd2l0aCB0aGUgW2RhdGEtYXBwXSBhdHRyaWJ1dGUnLCB0aGlzKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIGdlbkRlZmF1bHRTbG90OiBmdW5jdGlvbiBnZW5EZWZhdWx0U2xvdCgpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gW3RoaXMuZ2VuTGFiZWwoKV07CiAgICAgIHZhciBzbGlkZXIgPSB0aGlzLmdlblNsaWRlcigpOwogICAgICB0aGlzLmludmVyc2VMYWJlbCA/IGNoaWxkcmVuLnVuc2hpZnQoc2xpZGVyKSA6IGNoaWxkcmVuLnB1c2goc2xpZGVyKTsKICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLmdlblByb2dyZXNzKCkpOwogICAgICByZXR1cm4gY2hpbGRyZW47CiAgICB9LAogICAgZ2VuU2xpZGVyOiBmdW5jdGlvbiBnZW5TbGlkZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgY2xhc3M6IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgJ3Ytc2xpZGVyJzogdHJ1ZSwKICAgICAgICAgICd2LXNsaWRlci0taG9yaXpvbnRhbCc6ICF0aGlzLnZlcnRpY2FsLAogICAgICAgICAgJ3Ytc2xpZGVyLS12ZXJ0aWNhbCc6IHRoaXMudmVydGljYWwsCiAgICAgICAgICAndi1zbGlkZXItLWZvY3VzZWQnOiB0aGlzLmlzRm9jdXNlZCwKICAgICAgICAgICd2LXNsaWRlci0tYWN0aXZlJzogdGhpcy5pc0FjdGl2ZSwKICAgICAgICAgICd2LXNsaWRlci0tZGlzYWJsZWQnOiB0aGlzLmlzRGlzYWJsZWQsCiAgICAgICAgICAndi1zbGlkZXItLXJlYWRvbmx5JzogdGhpcy5pc1JlYWRvbmx5CiAgICAgICAgfSwgdGhpcy50aGVtZUNsYXNzZXMpLAogICAgICAgIGRpcmVjdGl2ZXM6IFt7CiAgICAgICAgICBuYW1lOiAnY2xpY2stb3V0c2lkZScsCiAgICAgICAgICB2YWx1ZTogdGhpcy5vbkJsdXIKICAgICAgICB9XSwKICAgICAgICBvbjogewogICAgICAgICAgY2xpY2s6IHRoaXMub25TbGlkZXJDbGljaywKICAgICAgICAgIG1vdXNlZG93bjogdGhpcy5vblNsaWRlck1vdXNlRG93biwKICAgICAgICAgIHRvdWNoc3RhcnQ6IHRoaXMub25TbGlkZXJNb3VzZURvd24KICAgICAgICB9CiAgICAgIH0sIHRoaXMuZ2VuQ2hpbGRyZW4oKSk7CiAgICB9LAogICAgZ2VuQ2hpbGRyZW46IGZ1bmN0aW9uIGdlbkNoaWxkcmVuKCkgewogICAgICByZXR1cm4gW3RoaXMuZ2VuSW5wdXQoKSwgdGhpcy5nZW5UcmFja0NvbnRhaW5lcigpLCB0aGlzLmdlblN0ZXBzKCksIHRoaXMuZ2VuVGh1bWJDb250YWluZXIodGhpcy5pbnRlcm5hbFZhbHVlLCB0aGlzLmlucHV0V2lkdGgsIHRoaXMuaXNBY3RpdmUsIHRoaXMuaXNGb2N1c2VkLCB0aGlzLm9uRm9jdXMsIHRoaXMub25CbHVyKV07CiAgICB9LAogICAgZ2VuSW5wdXQ6IGZ1bmN0aW9uIGdlbklucHV0KCkgewogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnaW5wdXQnLCB7CiAgICAgICAgYXR0cnM6IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgdmFsdWU6IHRoaXMuaW50ZXJuYWxWYWx1ZSwKICAgICAgICAgIGlkOiB0aGlzLmNvbXB1dGVkSWQsCiAgICAgICAgICBkaXNhYmxlZDogdHJ1ZSwKICAgICAgICAgIHJlYWRvbmx5OiB0cnVlLAogICAgICAgICAgdGFiaW5kZXg6IC0xCiAgICAgICAgfSwgdGhpcy4kYXR0cnMpCiAgICAgIH0pOwogICAgfSwKICAgIGdlblRyYWNrQ29udGFpbmVyOiBmdW5jdGlvbiBnZW5UcmFja0NvbnRhaW5lcigpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gW3RoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHRoaXMuc2V0QmFja2dyb3VuZENvbG9yKHRoaXMuY29tcHV0ZWRUcmFja0NvbG9yLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LXNsaWRlcl9fdHJhY2stYmFja2dyb3VuZCcsCiAgICAgICAgc3R5bGU6IHRoaXMudHJhY2tTdHlsZXMKICAgICAgfSkpLCB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmNvbXB1dGVkVHJhY2tGaWxsQ29sb3IsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3Ytc2xpZGVyX190cmFjay1maWxsJywKICAgICAgICBzdHlsZTogdGhpcy50cmFja0ZpbGxTdHlsZXMKICAgICAgfSkpXTsKICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHsKICAgICAgICBzdGF0aWNDbGFzczogJ3Ytc2xpZGVyX190cmFjay1jb250YWluZXInLAogICAgICAgIHJlZjogJ3RyYWNrJwogICAgICB9LCBjaGlsZHJlbik7CiAgICB9LAogICAgZ2VuU3RlcHM6IGZ1bmN0aW9uIGdlblN0ZXBzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgaWYgKCF0aGlzLnN0ZXAgfHwgIXRoaXMuc2hvd1RpY2tzKSByZXR1cm4gbnVsbDsKICAgICAgdmFyIHRpY2tTaXplID0gcGFyc2VGbG9hdCh0aGlzLnRpY2tTaXplKTsKICAgICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UodGhpcy5udW1UaWNrcyArIDEpOwogICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy52ZXJ0aWNhbCA/ICdib3R0b20nIDogdGhpcy4kdnVldGlmeS5ydGwgPyAncmlnaHQnIDogJ2xlZnQnOwogICAgICB2YXIgb2Zmc2V0RGlyZWN0aW9uID0gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuJHZ1ZXRpZnkucnRsID8gJ2xlZnQnIDogJ3JpZ2h0JyA6ICd0b3AnOwogICAgICBpZiAodGhpcy52ZXJ0aWNhbCkgcmFuZ2UucmV2ZXJzZSgpOwogICAgICB2YXIgdGlja3MgPSByYW5nZS5tYXAoZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgdmFyIF9zdHlsZTsKCiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107CgogICAgICAgIGlmIChfdGhpcy50aWNrTGFiZWxzW2luZGV4XSkgewogICAgICAgICAgY2hpbGRyZW4ucHVzaChfdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgICAgICBzdGF0aWNDbGFzczogJ3Ytc2xpZGVyX190aWNrLWxhYmVsJwogICAgICAgICAgfSwgX3RoaXMudGlja0xhYmVsc1tpbmRleF0pKTsKICAgICAgICB9CgogICAgICAgIHZhciB3aWR0aCA9IGluZGV4ICogKDEwMCAvIF90aGlzLm51bVRpY2tzKTsKICAgICAgICB2YXIgZmlsbGVkID0gX3RoaXMuJHZ1ZXRpZnkucnRsID8gMTAwIC0gX3RoaXMuaW5wdXRXaWR0aCA8IHdpZHRoIDogd2lkdGggPCBfdGhpcy5pbnB1dFdpZHRoOwogICAgICAgIHJldHVybiBfdGhpcy4kY3JlYXRlRWxlbWVudCgnc3BhbicsIHsKICAgICAgICAgIGtleTogaW5kZXgsCiAgICAgICAgICBzdGF0aWNDbGFzczogJ3Ytc2xpZGVyX190aWNrJywKICAgICAgICAgIGNsYXNzOiB7CiAgICAgICAgICAgICd2LXNsaWRlcl9fdGljay0tZmlsbGVkJzogZmlsbGVkCiAgICAgICAgICB9LAogICAgICAgICAgc3R5bGU6IChfc3R5bGUgPSB7CiAgICAgICAgICAgIHdpZHRoOiAiIi5jb25jYXQodGlja1NpemUsICJweCIpLAogICAgICAgICAgICBoZWlnaHQ6ICIiLmNvbmNhdCh0aWNrU2l6ZSwgInB4IikKICAgICAgICAgIH0sIF9kZWZpbmVQcm9wZXJ0eShfc3R5bGUsIGRpcmVjdGlvbiwgImNhbGMoIi5jb25jYXQod2lkdGgsICIlIC0gIikuY29uY2F0KHRpY2tTaXplIC8gMiwgInB4KSIpKSwgX2RlZmluZVByb3BlcnR5KF9zdHlsZSwgb2Zmc2V0RGlyZWN0aW9uLCAiY2FsYyg1MCUgLSAiLmNvbmNhdCh0aWNrU2l6ZSAvIDIsICJweCkiKSksIF9zdHlsZSkKICAgICAgICB9LCBjaGlsZHJlbik7CiAgICAgIH0pOwogICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZXJfX3RpY2tzLWNvbnRhaW5lcicsCiAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICd2LXNsaWRlcl9fdGlja3MtY29udGFpbmVyLS1hbHdheXMtc2hvdyc6IHRoaXMudGlja3MgPT09ICdhbHdheXMnIHx8IHRoaXMudGlja0xhYmVscy5sZW5ndGggPiAwCiAgICAgICAgfQogICAgICB9LCB0aWNrcyk7CiAgICB9LAogICAgZ2VuVGh1bWJDb250YWluZXI6IGZ1bmN0aW9uIGdlblRodW1iQ29udGFpbmVyKHZhbHVlLCB2YWx1ZVdpZHRoLCBpc0FjdGl2ZSwgaXNGb2N1c2VkLCBvbkZvY3VzLCBvbkJsdXIpIHsKICAgICAgdmFyIHJlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogJ3RodW1iJzsKICAgICAgdmFyIGNoaWxkcmVuID0gW3RoaXMuZ2VuVGh1bWIoKV07CiAgICAgIHZhciB0aHVtYkxhYmVsQ29udGVudCA9IHRoaXMuZ2VuVGh1bWJMYWJlbENvbnRlbnQodmFsdWUpOwogICAgICB0aGlzLnNob3dUaHVtYkxhYmVsICYmIGNoaWxkcmVuLnB1c2godGhpcy5nZW5UaHVtYkxhYmVsKHRodW1iTGFiZWxDb250ZW50KSk7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLnNldFRleHRDb2xvcih0aGlzLmNvbXB1dGVkVGh1bWJDb2xvciwgewogICAgICAgIHJlZjogcmVmLAogICAgICAgIGtleTogcmVmLAogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZXJfX3RodW1iLWNvbnRhaW5lcicsCiAgICAgICAgY2xhc3M6IHsKICAgICAgICAgICd2LXNsaWRlcl9fdGh1bWItY29udGFpbmVyLS1hY3RpdmUnOiBpc0FjdGl2ZSwKICAgICAgICAgICd2LXNsaWRlcl9fdGh1bWItY29udGFpbmVyLS1mb2N1c2VkJzogaXNGb2N1c2VkLAogICAgICAgICAgJ3Ytc2xpZGVyX190aHVtYi1jb250YWluZXItLXNob3ctbGFiZWwnOiB0aGlzLnNob3dUaHVtYkxhYmVsCiAgICAgICAgfSwKICAgICAgICBzdHlsZTogdGhpcy5nZXRUaHVtYkNvbnRhaW5lclN0eWxlcyh2YWx1ZVdpZHRoKSwKICAgICAgICBhdHRyczogewogICAgICAgICAgcm9sZTogJ3NsaWRlcicsCiAgICAgICAgICB0YWJpbmRleDogdGhpcy5pc0Rpc2FibGVkID8gLTEgOiB0aGlzLiRhdHRycy50YWJpbmRleCA/IHRoaXMuJGF0dHJzLnRhYmluZGV4IDogMCwKICAgICAgICAgICdhcmlhLWxhYmVsJzogdGhpcy4kYXR0cnNbJ2FyaWEtbGFiZWwnXSB8fCB0aGlzLmxhYmVsLAogICAgICAgICAgJ2FyaWEtdmFsdWVtaW4nOiB0aGlzLm1pbiwKICAgICAgICAgICdhcmlhLXZhbHVlbWF4JzogdGhpcy5tYXgsCiAgICAgICAgICAnYXJpYS12YWx1ZW5vdyc6IHRoaXMuaW50ZXJuYWxWYWx1ZSwKICAgICAgICAgICdhcmlhLXJlYWRvbmx5JzogU3RyaW5nKHRoaXMuaXNSZWFkb25seSksCiAgICAgICAgICAnYXJpYS1vcmllbnRhdGlvbic6IHRoaXMudmVydGljYWwgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnCiAgICAgICAgfSwKICAgICAgICBvbjogewogICAgICAgICAgZm9jdXM6IG9uRm9jdXMsCiAgICAgICAgICBibHVyOiBvbkJsdXIsCiAgICAgICAgICBrZXlkb3duOiB0aGlzLm9uS2V5RG93bgogICAgICAgIH0KICAgICAgfSksIGNoaWxkcmVuKTsKICAgIH0sCiAgICBnZW5UaHVtYkxhYmVsQ29udGVudDogZnVuY3Rpb24gZ2VuVGh1bWJMYWJlbENvbnRlbnQodmFsdWUpIHsKICAgICAgcmV0dXJuIHRoaXMuJHNjb3BlZFNsb3RzWyd0aHVtYi1sYWJlbCddID8gdGhpcy4kc2NvcGVkU2xvdHNbJ3RodW1iLWxhYmVsJ10oewogICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICB9KSA6IFt0aGlzLiRjcmVhdGVFbGVtZW50KCdzcGFuJywgW1N0cmluZyh2YWx1ZSldKV07CiAgICB9LAogICAgZ2VuVGh1bWJMYWJlbDogZnVuY3Rpb24gZ2VuVGh1bWJMYWJlbChjb250ZW50KSB7CiAgICAgIHZhciBzaXplID0gY29udmVydFRvVW5pdCh0aGlzLnRodW1iU2l6ZSk7CiAgICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLnZlcnRpY2FsID8gInRyYW5zbGF0ZVkoMjAlKSB0cmFuc2xhdGVZKCIuY29uY2F0KE51bWJlcih0aGlzLnRodW1iU2l6ZSkgLyAzIC0gMSwgInB4KSB0cmFuc2xhdGVYKDU1JSkgcm90YXRlKDEzNWRlZykiKSA6ICJ0cmFuc2xhdGVZKC0yMCUpIHRyYW5zbGF0ZVkoLTEycHgpIHRyYW5zbGF0ZVgoLTUwJSkgcm90YXRlKDQ1ZGVnKSI7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KFZTY2FsZVRyYW5zaXRpb24sIHsKICAgICAgICBwcm9wczogewogICAgICAgICAgb3JpZ2luOiAnYm90dG9tIGNlbnRlcicKICAgICAgICB9CiAgICAgIH0sIFt0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LXNsaWRlcl9fdGh1bWItbGFiZWwtY29udGFpbmVyJywKICAgICAgICBkaXJlY3RpdmVzOiBbewogICAgICAgICAgbmFtZTogJ3Nob3cnLAogICAgICAgICAgdmFsdWU6IHRoaXMuaXNGb2N1c2VkIHx8IHRoaXMuaXNBY3RpdmUgfHwgdGhpcy50aHVtYkxhYmVsID09PSAnYWx3YXlzJwogICAgICAgIH1dCiAgICAgIH0sIFt0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmNvbXB1dGVkVGh1bWJDb2xvciwgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZXJfX3RodW1iLWxhYmVsJywKICAgICAgICBzdHlsZTogewogICAgICAgICAgaGVpZ2h0OiBzaXplLAogICAgICAgICAgd2lkdGg6IHNpemUsCiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybQogICAgICAgIH0KICAgICAgfSksIFt0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCBjb250ZW50KV0pXSldKTsKICAgIH0sCiAgICBnZW5UaHVtYjogZnVuY3Rpb24gZ2VuVGh1bWIoKSB7CiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB0aGlzLnNldEJhY2tncm91bmRDb2xvcih0aGlzLmNvbXB1dGVkVGh1bWJDb2xvciwgewogICAgICAgIHN0YXRpY0NsYXNzOiAndi1zbGlkZXJfX3RodW1iJwogICAgICB9KSk7CiAgICB9LAogICAgZ2V0VGh1bWJDb250YWluZXJTdHlsZXM6IGZ1bmN0aW9uIGdldFRodW1iQ29udGFpbmVyU3R5bGVzKHdpZHRoKSB7CiAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLnZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7CiAgICAgIHZhciB2YWx1ZSA9IHRoaXMuJHZ1ZXRpZnkucnRsID8gMTAwIC0gd2lkdGggOiB3aWR0aDsKICAgICAgdmFsdWUgPSB0aGlzLnZlcnRpY2FsID8gMTAwIC0gdmFsdWUgOiB2YWx1ZTsKICAgICAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7CiAgICAgICAgdHJhbnNpdGlvbjogdGhpcy50cmFja1RyYW5zaXRpb24KICAgICAgfSwgZGlyZWN0aW9uLCAiIi5jb25jYXQodmFsdWUsICIlIikpOwogICAgfSwKICAgIG9uU2xpZGVyTW91c2VEb3duOiBmdW5jdGlvbiBvblNsaWRlck1vdXNlRG93bihlKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIF9lJHRhcmdldDsKCiAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMuaW50ZXJuYWxWYWx1ZTsKICAgICAgdGhpcy5pc0FjdGl2ZSA9IHRydWU7CgogICAgICBpZiAoKF9lJHRhcmdldCA9IGUudGFyZ2V0KSAhPSBudWxsICYmIF9lJHRhcmdldC5tYXRjaGVzKCcudi1zbGlkZXJfX3RodW1iLWNvbnRhaW5lciwgLnYtc2xpZGVyX190aHVtYi1jb250YWluZXIgKicpKSB7CiAgICAgICAgdGhpcy50aHVtYlByZXNzZWQgPSB0cnVlOwogICAgICAgIHZhciBkb21SZWN0ID0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7CiAgICAgICAgdmFyIHRvdWNoID0gJ3RvdWNoZXMnIGluIGUgPyBlLnRvdWNoZXNbMF0gOiBlOwogICAgICAgIHRoaXMuc3RhcnRPZmZzZXQgPSB0aGlzLnZlcnRpY2FsID8gdG91Y2guY2xpZW50WSAtIChkb21SZWN0LnRvcCArIGRvbVJlY3QuaGVpZ2h0IC8gMikgOiB0b3VjaC5jbGllbnRYIC0gKGRvbVJlY3QubGVmdCArIGRvbVJlY3Qud2lkdGggLyAyKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnN0YXJ0T2Zmc2V0ID0gMDsKICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMubW91c2VUaW1lb3V0KTsKICAgICAgICB0aGlzLm1vdXNlVGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMi50aHVtYlByZXNzZWQgPSB0cnVlOwogICAgICAgIH0sIDMwMCk7CiAgICAgIH0KCiAgICAgIHZhciBtb3VzZVVwT3B0aW9ucyA9IHBhc3NpdmVTdXBwb3J0ZWQgPyB7CiAgICAgICAgcGFzc2l2ZTogdHJ1ZSwKICAgICAgICBjYXB0dXJlOiB0cnVlCiAgICAgIH0gOiB0cnVlOwogICAgICB2YXIgbW91c2VNb3ZlT3B0aW9ucyA9IHBhc3NpdmVTdXBwb3J0ZWQgPyB7CiAgICAgICAgcGFzc2l2ZTogdHJ1ZQogICAgICB9IDogZmFsc2U7CiAgICAgIHZhciBpc1RvdWNoRXZlbnQgPSAoJ3RvdWNoZXMnIGluIGUpOwogICAgICB0aGlzLm9uTW91c2VNb3ZlKGUpOwogICAgICB0aGlzLmFwcC5hZGRFdmVudExpc3RlbmVyKGlzVG91Y2hFdmVudCA/ICd0b3VjaG1vdmUnIDogJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUsIG1vdXNlTW92ZU9wdGlvbnMpOwogICAgICBhZGRPbmNlRXZlbnRMaXN0ZW5lcih0aGlzLmFwcCwgaXNUb3VjaEV2ZW50ID8gJ3RvdWNoZW5kJyA6ICdtb3VzZXVwJywgdGhpcy5vblNsaWRlck1vdXNlVXAsIG1vdXNlVXBPcHRpb25zKTsKICAgICAgdGhpcy4kZW1pdCgnc3RhcnQnLCB0aGlzLmludGVybmFsVmFsdWUpOwogICAgfSwKICAgIG9uU2xpZGVyTW91c2VVcDogZnVuY3Rpb24gb25TbGlkZXJNb3VzZVVwKGUpIHsKICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLm1vdXNlVGltZW91dCk7CiAgICAgIHRoaXMudGh1bWJQcmVzc2VkID0gZmFsc2U7CiAgICAgIHZhciBtb3VzZU1vdmVPcHRpb25zID0gcGFzc2l2ZVN1cHBvcnRlZCA/IHsKICAgICAgICBwYXNzaXZlOiB0cnVlCiAgICAgIH0gOiBmYWxzZTsKICAgICAgdGhpcy5hcHAucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSwgbW91c2VNb3ZlT3B0aW9ucyk7CiAgICAgIHRoaXMuYXBwLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUsIG1vdXNlTW92ZU9wdGlvbnMpOwogICAgICB0aGlzLiRlbWl0KCdtb3VzZXVwJywgZSk7CiAgICAgIHRoaXMuJGVtaXQoJ2VuZCcsIHRoaXMuaW50ZXJuYWxWYWx1ZSk7CgogICAgICBpZiAoIWRlZXBFcXVhbCh0aGlzLm9sZFZhbHVlLCB0aGlzLmludGVybmFsVmFsdWUpKSB7CiAgICAgICAgdGhpcy4kZW1pdCgnY2hhbmdlJywgdGhpcy5pbnRlcm5hbFZhbHVlKTsKICAgICAgICB0aGlzLm5vQ2xpY2sgPSB0cnVlOwogICAgICB9CgogICAgICB0aGlzLmlzQWN0aXZlID0gZmFsc2U7CiAgICB9LAogICAgb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIG9uTW91c2VNb3ZlKGUpIHsKICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlbW92ZScpIHsKICAgICAgICB0aGlzLnRodW1iUHJlc3NlZCA9IHRydWU7CiAgICAgIH0KCiAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZSA9IHRoaXMucGFyc2VNb3VzZU1vdmUoZSk7CiAgICB9LAogICAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oZSkgewogICAgICBpZiAoIXRoaXMuaXNJbnRlcmFjdGl2ZSkgcmV0dXJuOwogICAgICB2YXIgdmFsdWUgPSB0aGlzLnBhcnNlS2V5RG93bihlLCB0aGlzLmludGVybmFsVmFsdWUpOwogICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA8IHRoaXMubWluVmFsdWUgfHwgdmFsdWUgPiB0aGlzLm1heFZhbHVlKSByZXR1cm47CiAgICAgIHRoaXMuaW50ZXJuYWxWYWx1ZSA9IHZhbHVlOwogICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB2YWx1ZSk7CiAgICB9LAogICAgb25TbGlkZXJDbGljazogZnVuY3Rpb24gb25TbGlkZXJDbGljayhlKSB7CiAgICAgIGlmICh0aGlzLm5vQ2xpY2spIHsKICAgICAgICB0aGlzLm5vQ2xpY2sgPSBmYWxzZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciB0aHVtYiA9IHRoaXMuJHJlZnMudGh1bWI7CiAgICAgIHRodW1iLmZvY3VzKCk7CiAgICAgIHRoaXMub25Nb3VzZU1vdmUoZSk7CiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMuaW50ZXJuYWxWYWx1ZSk7CiAgICB9LAogICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoZSkgewogICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlOwogICAgICB0aGlzLiRlbWl0KCdibHVyJywgZSk7CiAgICB9LAogICAgb25Gb2N1czogZnVuY3Rpb24gb25Gb2N1cyhlKSB7CiAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTsKICAgICAgdGhpcy4kZW1pdCgnZm9jdXMnLCBlKTsKICAgIH0sCiAgICBwYXJzZU1vdXNlTW92ZTogZnVuY3Rpb24gcGFyc2VNb3VzZU1vdmUoZSkgewogICAgICB2YXIgc3RhcnQgPSB0aGlzLnZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7CiAgICAgIHZhciBsZW5ndGggPSB0aGlzLnZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnOwogICAgICB2YXIgY2xpY2sgPSB0aGlzLnZlcnRpY2FsID8gJ2NsaWVudFknIDogJ2NsaWVudFgnOwoKICAgICAgdmFyIF90aGlzJCRyZWZzJHRyYWNrJGdldCA9IHRoaXMuJHJlZnMudHJhY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCiAgICAgICAgICB0cmFja1N0YXJ0ID0gX3RoaXMkJHJlZnMkdHJhY2skZ2V0W3N0YXJ0XSwKICAgICAgICAgIHRyYWNrTGVuZ3RoID0gX3RoaXMkJHJlZnMkdHJhY2skZ2V0W2xlbmd0aF07CgogICAgICB2YXIgY2xpY2tPZmZzZXQgPSAndG91Y2hlcycgaW4gZSA/IGUudG91Y2hlc1swXVtjbGlja10gOiBlW2NsaWNrXTsgLy8gSXQgaXMgcG9zc2libGUgZm9yIGxlZnQgdG8gYmUgTmFOLCBmb3JjZSB0byBudW1iZXIKCiAgICAgIHZhciBjbGlja1BvcyA9IE1hdGgubWluKE1hdGgubWF4KChjbGlja09mZnNldCAtIHRyYWNrU3RhcnQgLSB0aGlzLnN0YXJ0T2Zmc2V0KSAvIHRyYWNrTGVuZ3RoLCAwKSwgMSkgfHwgMDsKICAgICAgaWYgKHRoaXMudmVydGljYWwpIGNsaWNrUG9zID0gMSAtIGNsaWNrUG9zOwogICAgICBpZiAodGhpcy4kdnVldGlmeS5ydGwpIGNsaWNrUG9zID0gMSAtIGNsaWNrUG9zOwogICAgICByZXR1cm4gcGFyc2VGbG9hdCh0aGlzLm1pbikgKyBjbGlja1BvcyAqICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSk7CiAgICB9LAogICAgcGFyc2VLZXlEb3duOiBmdW5jdGlvbiBwYXJzZUtleURvd24oZSwgdmFsdWUpIHsKICAgICAgaWYgKCF0aGlzLmlzSW50ZXJhY3RpdmUpIHJldHVybjsKICAgICAgdmFyIHBhZ2V1cCA9IGtleUNvZGVzLnBhZ2V1cCwKICAgICAgICAgIHBhZ2Vkb3duID0ga2V5Q29kZXMucGFnZWRvd24sCiAgICAgICAgICBlbmQgPSBrZXlDb2Rlcy5lbmQsCiAgICAgICAgICBob21lID0ga2V5Q29kZXMuaG9tZSwKICAgICAgICAgIGxlZnQgPSBrZXlDb2Rlcy5sZWZ0LAogICAgICAgICAgcmlnaHQgPSBrZXlDb2Rlcy5yaWdodCwKICAgICAgICAgIGRvd24gPSBrZXlDb2Rlcy5kb3duLAogICAgICAgICAgdXAgPSBrZXlDb2Rlcy51cDsKICAgICAgaWYgKCFbcGFnZXVwLCBwYWdlZG93biwgZW5kLCBob21lLCBsZWZ0LCByaWdodCwgZG93biwgdXBdLmluY2x1ZGVzKGUua2V5Q29kZSkpIHJldHVybjsKICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICB2YXIgc3RlcCA9IHRoaXMuc3RlcE51bWVyaWMgfHwgMTsKICAgICAgdmFyIHN0ZXBzID0gKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKSAvIHN0ZXA7CgogICAgICBpZiAoW2xlZnQsIHJpZ2h0LCBkb3duLCB1cF0uaW5jbHVkZXMoZS5rZXlDb2RlKSkgewogICAgICAgIHZhciBpbmNyZWFzZSA9IHRoaXMuJHZ1ZXRpZnkucnRsID8gW2xlZnQsIHVwXSA6IFtyaWdodCwgdXBdOwogICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbmNyZWFzZS5pbmNsdWRlcyhlLmtleUNvZGUpID8gMSA6IC0xOwogICAgICAgIHZhciBtdWx0aXBsaWVyID0gZS5zaGlmdEtleSA/IDMgOiBlLmN0cmxLZXkgPyAyIDogMTsKICAgICAgICB2YWx1ZSA9IHZhbHVlICsgZGlyZWN0aW9uICogc3RlcCAqIG11bHRpcGxpZXI7CiAgICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSBob21lKSB7CiAgICAgICAgdmFsdWUgPSB0aGlzLm1pblZhbHVlOwogICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gZW5kKSB7CiAgICAgICAgdmFsdWUgPSB0aGlzLm1heFZhbHVlOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfZGlyZWN0aW9uID0gZS5rZXlDb2RlID09PSBwYWdlZG93biA/IDEgOiAtMTsKCiAgICAgICAgdmFsdWUgPSB2YWx1ZSAtIF9kaXJlY3Rpb24gKiBzdGVwICogKHN0ZXBzID4gMTAwID8gc3RlcHMgLyAxMCA6IDEwKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfSwKICAgIHJvdW5kVmFsdWU6IGZ1bmN0aW9uIHJvdW5kVmFsdWUodmFsdWUpIHsKICAgICAgaWYgKCF0aGlzLnN0ZXBOdW1lcmljKSByZXR1cm4gdmFsdWU7IC8vIEZvcm1hdCBpbnB1dCB2YWx1ZSB1c2luZyB0aGUgc2FtZSBudW1iZXIKICAgICAgLy8gb2YgZGVjaW1hbHMgcGxhY2VzIGFzIGluIHRoZSBzdGVwIHByb3AKCiAgICAgIHZhciB0cmltbWVkU3RlcCA9IHRoaXMuc3RlcC50b1N0cmluZygpLnRyaW0oKTsKICAgICAgdmFyIGRlY2ltYWxzID0gdHJpbW1lZFN0ZXAuaW5kZXhPZignLicpID4gLTEgPyB0cmltbWVkU3RlcC5sZW5ndGggLSB0cmltbWVkU3RlcC5pbmRleE9mKCcuJykgLSAxIDogMDsKICAgICAgdmFyIG9mZnNldCA9IHRoaXMubWluVmFsdWUgJSB0aGlzLnN0ZXBOdW1lcmljOwogICAgICB2YXIgbmV3VmFsdWUgPSBNYXRoLnJvdW5kKCh2YWx1ZSAtIG9mZnNldCkgLyB0aGlzLnN0ZXBOdW1lcmljKSAqIHRoaXMuc3RlcE51bWVyaWMgKyBvZmZzZXQ7CiAgICAgIHJldHVybiBwYXJzZUZsb2F0KE1hdGgubWluKG5ld1ZhbHVlLCB0aGlzLm1heFZhbHVlKS50b0ZpeGVkKGRlY2ltYWxzKSk7CiAgICB9CiAgfQp9KTs="},null]}